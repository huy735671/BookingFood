import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Image,
  Alert,
} from 'react-native';
import auth from '@react-native-firebase/auth';
import firestore from '@react-native-firebase/firestore';
import {useNavigation} from '@react-navigation/native';

const GroupList = ({groups}) => {
  const navigation = useNavigation();

  const userEmail = auth().currentUser?.email;

  // L·ªçc danh s√°ch ch·ªâ l·∫•y nh√≥m c√≥ status l√† "approved"
  const approvedGroups = groups.filter(item => item.status === 'approved');

  // H√†m x·ª≠ l√Ω tham gia nh√≥m
  const handleJoinGroup = async (groupId) => {
    Alert.alert(
      "X√°c nh·∫≠n",
      "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tham gia h·ªôi nh√≥m n√†y kh√¥ng?",
      [
        { text: "H·ªßy", style: "cancel" },
        {
          text: "X√°c nh·∫≠n",
          onPress: async () => {
            try {
              const user = auth().currentUser;
              if (!user) {
                Alert.alert("L·ªói", "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ tham gia nh√≥m.");
                return;
              }
  
              const groupRef = firestore().collection("GROUPS").doc(groupId);
              const groupDoc = await groupRef.get();
  
              if (!groupDoc.exists) {
                Alert.alert("L·ªói", "Nh√≥m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.");
                return;
              }
  
              const groupData = groupDoc.data();
              const currentMembers = groupData.members || [];
  
              // Ki·ªÉm tra n·∫øu user ƒë√£ l√† th√†nh vi√™n th√¨ kh√¥ng th√™m n·ªØa
              if (currentMembers.some((member) => member.email === user.email)) {
                Alert.alert("Th√¥ng b√°o", "B·∫°n ƒë√£ l√† th√†nh vi√™n c·ªßa nh√≥m n√†y.");
                return;
              }
  
              // üî• T√¨m user trong collection "USERS" d·ª±a theo email
              const usersCollection = firestore().collection("users");
              const userSnapshot = await usersCollection
                .where("email", "==", user.email)
                .limit(1)
                .get();
  
              let fullName = "Ng∆∞·ªùi d√πng m·ªõi";
              if (!userSnapshot.empty) {
                fullName = userSnapshot.docs[0].data().fullName || fullName;
              }
  
              const joinDate = new Date().toISOString(); // L∆∞u ng√†y tham gia d∆∞·ªõi d·∫°ng chu·ªói
  
              // C·∫≠p nh·∫≠t danh s√°ch th√†nh vi√™n
              const updatedMembers = [
                ...currentMembers,
                {
                  email: user.email,
                  fullName: fullName,
                  joinedAt: joinDate,
                },
              ];
  
              await groupRef.update({ members: updatedMembers });
  
              Alert.alert("Th√†nh c√¥ng", "B·∫°n ƒë√£ tham gia h·ªôi nh√≥m!");
            } catch (error) {
              console.error("L·ªói khi tham gia nh√≥m:", error);
              Alert.alert("L·ªói", "Kh√¥ng th·ªÉ tham gia nh√≥m, vui l√≤ng th·ª≠ l·∫°i!");
            }
          },
        },
      ]
    );
  };
  

  return (
    <View>
      {approvedGroups.map(item => {
        const isOwner = item.createdBy?.email === userEmail; // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ ph·∫£i ch·ªß nh√≥m kh√¥ng
        const isMember = item.members?.some(
          member => member.email === userEmail,
        ); // Ki·ªÉm tra user ƒë√£ tham gia nh√≥m ch∆∞a

        return (
          <View key={item.id} style={styles.groupCard}>
            {/* H√¨nh ·∫£nh nh√≥m b√™n tr√°i */}
            <Image source={{uri: item.groupImage}} style={styles.groupImage} />

            {/* N·ªôi dung nh√≥m b√™n ph·∫£i */}
            <View style={styles.groupInfoContainer}>
              <Text style={styles.groupTitle}>{item.groupName}</Text>
              <Text style={styles.groupInfo}>
                {item.members?.length || 0} th√†nh vi√™n ‚Ä¢ {item.location}
              </Text>

              {/* H√†ng n√∫t b·∫•m */}
              <View style={styles.buttonRow}>
                {isOwner || isMember ? (
                  <TouchableOpacity
                    style={styles.ownerButton}
                    onPress={() => navigation.navigate('GroupDetailScreen', { group: item })}>
                    <Text style={styles.buttonText}>V√†o</Text>
                  </TouchableOpacity>
                ) : (
                  <TouchableOpacity
                    style={styles.joinedButton}
                    onPress={() => handleJoinGroup(item.id)}>
                    <Text style={styles.buttonText}>Tham gia</Text>
                  </TouchableOpacity>
                )}
              </View>
            </View>
          </View>
        );
      })}
    </View>
  );
};

const styles = StyleSheet.create({
  groupCard: {
    flexDirection: 'row',
    backgroundColor: 'white',
    padding: 10,
    margin: 10,
    borderRadius: 8,
    alignItems: 'center',
  },
  groupImage: {
    width: 80,
    height: 80,
    borderRadius: 10,
    marginRight: 10,
  },
  groupInfoContainer: {
    flex: 1,
  },
  groupTitle: {fontSize: 16, fontWeight: 'bold'},
  groupInfo: {color: '#777', marginBottom: 5},
  buttonRow: {
    flexDirection: 'row',
    marginTop: 5,
  },
  joinedButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 5,
    paddingHorizontal: 10,
    borderRadius: 5,
    marginRight: 10,
  },
  ownerButton: {
    backgroundColor: '#FFA500', // M√†u cam cho n√∫t V√†o
    paddingVertical: 5,
    paddingHorizontal: 10,
    borderRadius: 5,
  },
  buttonText: {color: 'white'},
});

export default GroupList;
